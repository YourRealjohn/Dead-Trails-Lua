-- script made by John do not Change it or i burn your house
-- nah skidders
-- don't ever try to steal my script dude your piece of shit
-- i know you already skidd other of my script 




































-- you still here?
local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/realredz/RedzLibV5/refs/heads/main/Source.lua"))()

local Window = redzlib:MakeWindow({"RUPEREZ HUB", "By John", "testando-redzLibv5.json"})
Window:AddMinimizeButton({
  Button = { Image = redzlib:GetIcon("rbxassetid://15298567397"), BackgroundTransparency = 0 },
  Corner = { CornerRadius = UDim.new(0, 6) }
})

-- Tabs
local Tab1 = Window:MakeTab({"Main", "Home"})
local Tab2 = Window:MakeTab({"Player", "User"})
local Tab3 = Window:MakeTab({"PvP", "Sword"})
local Tab4 = Window:MakeTab({"SuS MODE", "eye"})
local Tab5 = Window:MakeTab({"Information", "Map"})
local Tab6 = Window:MakeTab({"Script", "List"})
local Tab7 = Window:MakeTab({"Instructions", "Package"})
local Tab8 = Window:MakeTab({"Update log", "Mail"})
local Tab9 = Window:MakeTab({"Misc", "Setting"})

-- Add a section and a paragraph
Tab1:AddSection({"About Main Feature of The Fucking Script"})
Tab1:AddParagraph({
    Name = "Main Paragraph",
    Text = "I don't know what to put here Fuck you xd"
})

Tab1:AddToggle({
    Name = "GotoTrain [Coming Soon]",
    Default = false,
    Callback = function(state)
        
    end
})

Tab1:AddButton({
    Name = "Grab Player",
    Callback = function()
        Window:Dialog({
            Title = "Confirm it",
            Text = "Are you sure do you really want to execute this script?",
            Options = {
                {"Confirm", function()
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/JOHNGAMING23/Dead-trails-Lua/refs/heads/main/Grab%20player%20v4"))()
                end},
                {"Cancel", function() end}
            }
        })
    end
})

Tab1:AddToggle({
    Name = "Auto pick up Item",
    Default = false,
    Callback = function(state)
        
    end
})

Tab1:AddSection({"Fucking best Feature"})

local function GetItemNames()
    local items = {}
    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                table.insert(items, item.Name)
            end
        end
    else
        warn("RuntimeItems folder not found!")
    end
    return items
end

Tab1:AddDropdown({
    Name = "Select item [Currently not working]",
   Options = GetItemNames(), 
   CurrentOption = "Select an item",
   MultipleOptions = false,
   Flag = "ItemDropdown", 
   Callback = function(selectedItem)
       if type(selectedItem) == "table" then
           selectedItem = selectedItem[1] 
       end
   end,
})

Tab1:AddButton({
    Name = "Refresh the Items List [Currently not working]",
    Callback = function()
        Dropdown:Refresh(GetItemNames()) -- Refresh dropdown list
        print("Items list refreshed!")
    end
})

Tab1:AddButton({
    Name = "Bring The Fucking item that you choose [Currently not working]",
    Callback = function()
       local selectedItemName = Dropdown.CurrentOption
       if type(selectedItemName) == "table" then
           selectedItemName = selectedItemName[1] 
       end

       if selectedItemName == "Select an item" then
           warn("No item selected!")
           return
       end

       local runtimeItems = workspace:FindFirstChild("RuntimeItems")
       if not runtimeItems then
           warn("RuntimeItems folder not found!")
           return
       end

       local selectedItem
       for _, item in ipairs(runtimeItems:GetDescendants()) do
           if item:IsA("Model") and item.Name == selectedItemName then
               selectedItem = item
               break
           end
       end

       if not selectedItem then
           warn("Item not found in RuntimeItems:", selectedItemName)
           return
       end

       local Players = game:GetService("Players")
       local LocalPlayer = Players.LocalPlayer
       if not LocalPlayer then
           warn("LocalPlayer not found!")
           return
       end

       local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
       local HumanoidRootPart = Character:WaitForChild("HumanoidRootPart")

       if not selectedItem.PrimaryPart then
           warn(selectedItem.Name .. " has no PrimaryPart and cannot be moved.")
           return
       end

       selectedItem:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + Vector3.new(0, 1, 0))
       print("Collected:", selectedItem.Name)
   end,
})

Tab1:AddButton({
    Name = "Collect All Fucking stupid Items",
    Callback = function()
       local runtimeItems = workspace:FindFirstChild("RuntimeItems")
       if not runtimeItems then
           warn("RuntimeItems folder not found!")
           return
       end

       local ps = game:GetService("Players").LocalPlayer
       local ch = ps.Character or ps.CharacterAdded:Wait()
       local HumanoidRootPart = ch:FindFirstChild("HumanoidRootPart")

       if not HumanoidRootPart then
           warn("HumanoidRootPart not found!")
           return
       end

       for _, item in ipairs(runtimeItems:GetDescendants()) do
           if item:IsA("Model") and item.PrimaryPart then
               local offset = HumanoidRootPart.CFrame.LookVector * 5
               item:SetPrimaryPartCFrame(HumanoidRootPart.CFrame + offset)
           else
               warn(item.Name .. " has no PrimaryPart.")
           end
       end 
   end,
})

-- Tab 2 About Player
Tab2:AddSection({"Player Tab"})
Tab2:AddParagraph({
    Name = " Player Paragraph",
    Text = "Player tab this where you can change your Walkspeed and jump power and more"
})

-- Optimized Noclip
local Noclip = nil
local Clip = true -- Default is clipped

function noclip()
    Clip = false
    Noclip = game:GetService("RunService").Stepped:Connect(function()
        if not Clip and game.Players.LocalPlayer.Character then
            for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                if v:IsA("BasePart") and v.CanCollide then
                    v.CanCollide = false
                end
            end
        end
    end)
end

function clip()
    Clip = true
    if Noclip then
        Noclip:Disconnect()
        Noclip = nil
    end
    if game.Players.LocalPlayer.Character then
        for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
            if v:IsA("BasePart") and not v.CanCollide then
                v.CanCollide = true
            end
        end
    end
end

Tab2:AddToggle({
    Name = "Enable Noclip",
    Default = false,
    Callback = function(state)
        if state then
            noclip() -- Enable noclip
        else
            clip() -- Disable noclip
        end
    end
})

Tab1:AddSection({"Jumping"})

-- Toggle for Walkspeed
local InfiniteJumpEnabled = false
local jumpConnection

Tab2:AddToggle({
    Name = "Infinite Jumps",
    Default = false,
    Callback = function(state)
        InfiniteJumpEnabled = state
        
        if InfiniteJumpEnabled then
            -- Connect the event
            jumpConnection = game:GetService("UserInputService").JumpRequest:Connect(function()
                game:GetService("Players").LocalPlayer.Character:FindFirstChildOfClass('Humanoid'):ChangeState("Jumping")
            end)
        else
            -- Disconnect the event
            if jumpConnection then
                jumpConnection:Disconnect()
                jumpConnection = nil
            end
        end
    end    
})

local jumpPowerEnabled = false
local savedJumpPower = 50 -- Default jump power

Tab2:AddToggle({
    Name = "Enable Jump Power",
    Default = false,
    Callback = function(state)
        jumpPowerEnabled = state
        
        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")

        if humanoid then
            if state then
                humanoid.JumpPower = savedJumpPower
            else
                humanoid.JumpPower = 50 -- Default jump power
            end
        end
    end
})

Tab2:AddSlider({
    Name = "Jump Power Slider",
    Min = 1,
    Max = 60,
    Default = 50,
    Callback = function(Value)
        savedJumpPower = Value
        print("Slider Value Updated:", Value)

        local player = game.Players.LocalPlayer
        local character = player.Character or player.CharacterAdded:Wait()
        local humanoid = character and character:FindFirstChildOfClass("Humanoid")

        if humanoid and jumpPowerEnabled then
            humanoid.JumpPower = Value
            print("JumpPower set to:", Value)
        end
    end
})

local speedEnabled = false -- Toggle state
local savedSpeed = 16 -- Default speed

Tab2:AddSection({"Walking"})

-- Toggle button
Tab2:AddToggle({
    Name = "Enable WalkSpeed",
    Default = false,
    Callback = function(state)
        speedEnabled = state
        if state then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = savedSpeed
        else
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = 16 -- Default speed
        end
    end
})

-- Speed slider
Tab2:AddSlider({
    Name = "Speed",
    Min = 15,
    Max = 20,
    Default = 16,
    Callback = function(value)
        savedSpeed = value
        if speedEnabled then
            game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = value
        end
    end
})

-- Apply speed after respawn
game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    wait(1) -- Wait for character to load
    if speedEnabled then
        character:WaitForChild("Humanoid").WalkSpeed = savedSpeed
    end
end)

Tab3:AddSection({"PvP Tab"})
Tab3:AddParagraph({
    Name = "PvP Paragraph",
    Text = "This is where you can find ESP player,ESP item and zombie also Auto aim To mobs"
})

-- Print hello world on button press
Tab3:AddButton({"Gun No reload [Anti ban]", function()
    print("Currently not working")
end})

-- Aimbot Script
local RunService = game:GetService("RunService")
local Cam = workspace.CurrentCamera
local Player = game:GetService("Players").LocalPlayer

local validNPCs = {}
local raycastParams = RaycastParams.new()
raycastParams.FilterType = Enum.RaycastFilterType.Blacklist

local function isNPC(obj)
    return obj:IsA("Model") 
        and obj:FindFirstChild("Humanoid")
        and obj.Humanoid.Health > 0
        and obj:FindFirstChild("Head")
        and obj:FindFirstChild("HumanoidRootPart")
        and not game:GetService("Players"):GetPlayerFromCharacter(obj)
end

local function updateNPCs()
    local tempTable = {}
    for _, obj in ipairs(workspace:GetDescendants()) do
        if isNPC(obj) then
            tempTable[obj] = true
        end
    end
    for i = #validNPCs, 1, -1 do
        if not tempTable[validNPCs[i]] then
            table.remove(validNPCs, i)
        end
    end
    for obj in pairs(tempTable) do
        if not table.find(validNPCs, obj) then
            table.insert(validNPCs, obj)
        end
    end
end

local function handleDescendant(descendant)
    if isNPC(descendant) then
        table.insert(validNPCs, descendant)
        local humanoid = descendant:WaitForChild("Humanoid")
        humanoid.Destroying:Connect(function()
            for i = #validNPCs, 1, -1 do
                if validNPCs[i] == descendant then
                    table.remove(validNPCs, i)
                    break
                end
            end
        end)
    end
end

workspace.DescendantAdded:Connect(handleDescendant)

local function predictPos(target)
    local rootPart = target:FindFirstChild("HumanoidRootPart")
    local head = target:FindFirstChild("Head")
    if not rootPart or not head then
        return head and head.Position or rootPart and rootPart.Position
    end
    local velocity = rootPart.Velocity
    local predictionTime = 0.02
    local basePosition = rootPart.Position + velocity * predictionTime
    local headOffset = head.Position - rootPart.Position
    return basePosition + headOffset
end

local function getTarget()
    local nearest = nil
    local minDistance = math.huge
    local viewportCenter = Cam.ViewportSize / 2
    raycastParams.FilterDescendantsInstances = {Player.Character}
    for _, npc in ipairs(validNPCs) do
        local predictedPos = predictPos(npc)
        local screenPos, visible = Cam:WorldToViewportPoint(predictedPos)
        if visible and screenPos.Z > 0 then
            local ray = workspace:Raycast(
                Cam.CFrame.Position,
                (predictedPos - Cam.CFrame.Position).Unit * 1000,
                raycastParams
            )
            if ray and ray.Instance:IsDescendantOf(npc) then
                local distance = (Vector2.new(screenPos.X, screenPos.Y) - viewportCenter).Magnitude
                if distance < minDistance then
                    minDistance = distance
                    nearest = npc
                end
            end
        end
    end
    return nearest
end

local function aim(targetPosition)
    local currentCF = Cam.CFrame
    local targetDirection = (targetPosition - currentCF.Position).Unit
    local smoothFactor = 0.581
    local newLookVector = currentCF.LookVector:Lerp(targetDirection, smoothFactor)
    Cam.CFrame = CFrame.new(currentCF.Position, currentCF.Position + newLookVector)
end

local heartbeat = RunService.Heartbeat
local lastUpdate = 0
local UPDATE_INTERVAL = 0.4

local aimbotEnabled = false

heartbeat:Connect(function(dt)
    lastUpdate = lastUpdate + dt
    if lastUpdate >= UPDATE_INTERVAL then
        updateNPCs()
        lastUpdate = 0
    end
    if aimbotEnabled then
        local target = getTarget()
        if target then
            local predictedPosition = predictPos(target)
            aim(predictedPosition)
        end
    end
end)

-- npc remove
workspace.DescendantRemoving:Connect(function(descendant)
    if isNPC(descendant) then
        for i = #validNPCs, 1, -1 do
            if validNPCs[i] == descendant then
                table.remove(validNPCs, i)
                break
            end
        end
    end
end)

-- Aimbot Toggle
Tab2:AddToggle({
    Name = "Auto aim Mobs",
    CurrentValue = false,
    Flag = "AimbotToggle",
    Callback = function(Value)
        aimbotEnabled = Value
    end
})

Tab3:AddSection({"ESP Something WAHAHAHA"})

local ESPHandles = {}
local ESPEnabled = false

local function CreateESP(object, color)
    if not object or not object.PrimaryPart then return end

    local highlight = Instance.new("Highlight")
    highlight.Name = "ESP_Highlight"
    highlight.Adornee = object
    highlight.FillColor = color
    highlight.OutlineColor = color
    highlight.Parent = object

    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_Billboard"
    billboard.Adornee = object.PrimaryPart
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 5, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = object

    local textLabel = Instance.new("TextLabel")
    textLabel.Text = object.Name
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.TextColor3 = color
    textLabel.BackgroundTransparency = 1
    textLabel.TextSize = 7
    textLabel.Parent = billboard

    ESPHandles[object] = {Highlight = highlight, Billboard = billboard}
end

local function ClearESP()
    for obj, handles in pairs(ESPHandles) do
        if handles.Highlight then handles.Highlight:Destroy() end
        if handles.Billboard then handles.Billboard:Destroy() end
    end
    ESPHandles = {}
end

local function UpdateESP()
    ClearESP()

    -- ESP for Items 
    local runtimeItems = workspace:FindFirstChild("RuntimeItems")
    if runtimeItems then
        for _, item in ipairs(runtimeItems:GetDescendants()) do
            if item:IsA("Model") then
                CreateESP(item, Color3.new(1, 0, 0)) 
            end
        end
    end

    -- ESP mobs
    local baseplates = workspace:FindFirstChild("Baseplates")
    if baseplates and #baseplates:GetChildren() >= 2 then
        local secondBaseplate = baseplates:GetChildren()[2]
        local centerBaseplate = secondBaseplate and secondBaseplate:FindFirstChild("CenterBaseplate")
        local animals = centerBaseplate and centerBaseplate:FindFirstChild("Animals")
        if animals then
            for _, animal in ipairs(animals:GetDescendants()) do
                if animal:IsA("Model") then
                    CreateESP(animal, Color3.new(1, 0, 1)) -- Purple for Animals
                end
            end
        end
    end

    local nightEnemies = workspace:FindFirstChild("NightEnemies")
    if nightEnemies then
        for _, enemy in ipairs(nightEnemies:GetDescendants()) do
            if enemy:IsA("Model") then
                CreateESP(enemy, Color3.new(0, 0, 1)) -- Blue for Night Enemies
            end
        end
    end

    local destroyedHouse = workspace:FindFirstChild("RandomBuildings") and workspace.RandomBuildings:FindFirstChild("DestroyedHouse")
    local zombiePart = destroyedHouse and destroyedHouse:FindFirstChild("StandaloneZombiePart")
    local zombies = zombiePart and zombiePart:FindFirstChild("Zombies")
    if zombies then
        for _, zombie in ipairs(zombies:GetChildren()) do
            if zombie:IsA("Model") then
                CreateESP(zombie, Color3.new(0, 1, 0)) -- Green for Zombies
            end
        end
    end
end

local function AutoUpdateESP()
    while ESPEnabled do
        UpdateESP()
        wait() 
    end
end

Tab3:AddToggle({
    Name = "ESP Items and Mobs",
    CurrentValue = false,
    Flag = "ESPAllToggle",
    Callback = function(Value)
        ESPEnabled = Value
        if Value then
            UpdateESP()
            coroutine.wrap(AutoUpdateESP)()
        else
            ClearESP()
        end
    end
})


-- ESP PLAYER FUNCTION
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local COREGUI = game:GetService("CoreGui")

local ESPenabled = false
local espTransparency = 0.5  -- Default transparency value
local espConnections = {}  -- Store connections for toggling

local function getRoot(char)
    return char:FindFirstChild("HumanoidRootPart") or char:FindFirstChild("Torso") or char:FindFirstChild("UpperTorso")
end

local function round(num, numDecimalPlaces)
    local mult = 10^(numDecimalPlaces or 0)
    return math.floor(num * mult + 0.5) / mult
end

local function ESP(plr)
    if not ESPenabled then return end  -- Stop if ESP is disabled

    task.spawn(function()
        for _, v in pairs(COREGUI:GetChildren()) do
            if v.Name == plr.Name..'_ESP' then
                v:Destroy()
            end
        end
        task.wait()

        if plr.Character and plr.Name ~= Players.LocalPlayer.Name and not COREGUI:FindFirstChild(plr.Name..'_ESP') then
            local ESPholder = Instance.new("Folder")
            ESPholder.Name = plr.Name..'_ESP'
            ESPholder.Parent = COREGUI

            repeat task.wait(1) until plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid")

            for _, n in pairs(plr.Character:GetChildren()) do
                if n:IsA("BasePart") then
                    local a = Instance.new("BoxHandleAdornment")
                    a.Name = plr.Name
                    a.Parent = ESPholder
                    a.Adornee = n
                    a.AlwaysOnTop = true
                    a.ZIndex = 10
                    a.Size = n.Size
                    a.Transparency = espTransparency
                    a.Color3 = plr.TeamColor.Color
                end
            end

            if plr.Character:FindFirstChild("Head") then
                local BillboardGui = Instance.new("BillboardGui")
                local TextLabel = Instance.new("TextLabel")

                BillboardGui.Adornee = plr.Character.Head
                BillboardGui.Name = plr.Name
                BillboardGui.Parent = ESPholder
                BillboardGui.Size = UDim2.new(0, 100, 0, 150)
                BillboardGui.StudsOffset = Vector3.new(0, 1, 0)
                BillboardGui.AlwaysOnTop = true

                TextLabel.Parent = BillboardGui
                TextLabel.BackgroundTransparency = 1
                TextLabel.Size = UDim2.new(0, 100, 0, 100)
                TextLabel.Font = Enum.Font.SourceSansSemibold
                TextLabel.TextSize = 20
                TextLabel.TextColor3 = Color3.new(1, 1, 1)
                TextLabel.TextStrokeTransparency = 0
                TextLabel.TextYAlignment = Enum.TextYAlignment.Bottom

                local function espLoop()
                    if not ESPenabled or not COREGUI:FindFirstChild(plr.Name..'_ESP') then
                        return
                    end
                    if plr.Character and getRoot(plr.Character) and plr.Character:FindFirstChildOfClass("Humanoid") then
                        local pos = math.floor((getRoot(Players.LocalPlayer.Character).Position - getRoot(plr.Character).Position).Magnitude)
                        TextLabel.Text = "Name: "..plr.Name.." | Health: "..round(plr.Character:FindFirstChildOfClass("Humanoid").Health, 1).." | Studs: "..pos
                    end
                end

                local conn = RunService.RenderStepped:Connect(espLoop)
                espConnections[plr] = conn  -- Store the connection
            end
        end
    end)
end

local function toggleESP(state)
    ESPenabled = state

    if ESPenabled then
        for _, plr in pairs(Players:GetPlayers()) do
            if plr ~= Players.LocalPlayer then
                ESP(plr)
            end
        end
    else
        -- Remove all ESP elements and disconnect loops
        for _, v in pairs(COREGUI:GetChildren()) do
            if v.Name:find("_ESP") then
                v:Destroy()
            end
        end
        for _, conn in pairs(espConnections) do
            if conn then
                conn:Disconnect()
            end
        end
        espConnections = {}
    end
end

Players.PlayerAdded:Connect(function(plr)
    if ESPenabled then
        ESP(plr)
    end
end)

Tab3:AddToggle({
    Name = "ESP Player",
    CurrentValue = false,
    Callback = function(state)
        toggleESP(state)
    end
})

Tab3:AddToggle({
    Name = "ESP Train",
    CurrentValue = false,
    Callback = function(state)
        toggleESP(state)
    end
})

Tab9:AddSection({"Setting"})
local Paragraph = Tab9:AddParagraph({
    Name = "Settings Paragraph",
    Text = "Setting tab this is where you can Server hop or Rejoin or Join to other server using Job id and others"
})

Tab9:AddSection({"Join to another Server using Job id"})
Tab9:AddTextBox({
    Name = "Job ID",
    Default = "",
    TextDisappear = true,
    Callback = function(v)
	    _G.Job = v
		print(v)
    end
})

Tab9:AddButton({"Join Server", function()
game:GetService("TeleportService"):TeleportToPlaceInstance(game.placeId,_G.Job, game.Players.LocalPlayer)
end})

Tab9:AddSection({"Don't Know what is Job id? Go to Instructions tab"})

Tab9:AddButton({"COPY THE SERVER ID", function()
    setclipboard(tostring(game.JobId))
end})

Tab9:AddSection({"Rejoin and Server Hop"})

-- Rejoin button 
Tab9:AddButton({
    Name = "Rejoin",
    Callback = function()
        Window:Dialog({
            Title = "Confirm Rejoin",
            Text = "Are you sure do you really want to rejoin?",
            Options = {
                {"Confirm", function()
                    game:GetService("TeleportService"):TeleportToPlaceInstance(game.PlaceId, game.JobId, plr)
                end},
                {"Cancel", function() 
                    print("Rejoin canceled.")
                end}
            }
        })
    end
})

-- ServerHop Button 
Tab9:AddButton({
    Name = "Server Hop",
    Callback = function()
        Window:Dialog({
            Title = "Confirm Server Hop",
            Text = "Are you sure you do you want to server hop Huh?",
            Options = {
                {"Confirm", function()
                    local HttpService = game:GetService("HttpService")
                    local TeleportService = game:GetService("TeleportService")
                    local Player = game.Players.LocalPlayer

                    local function serverHop()
                        local gameId = game.PlaceId
                        local servers = {}

                        -- Get the server list
                        local success, result = pcall(function()
                            return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/"..gameId.."/servers/Public?sortOrder=Desc&limit=100"))
                        end)

                        if success and result and result.data then
                            for _, server in ipairs(result.data) do
                                if server.playing < server.maxPlayers and server.id ~= game.JobId then
                                    table.insert(servers, server.id)
                                end
                            end

                            -- Teleport to a random server
                            if #servers > 0 then
                                TeleportService:TeleportToPlaceInstance(gameId, servers[math.random(1, #servers)], Player)
                            else
                                warn("No available servers found.")
                            end
                        else
                            warn("Failed to get server list.")
                        end
                    end

                    -- Call the function to hop to another server
                    serverHop()
                end},
                {"Cancel", function() end}
            }
        })
    end
})
